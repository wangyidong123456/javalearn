<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="test">
	<!-- 编写sql -->
	<!-- select 查询标签 -->
	<!-- id:sql语句的唯一标识，类似身份证号 -->
	<!-- #{id} 类似 jdbc中的 ?,需要设置的参数 -->
	<!-- parameterType 参数类型 -->
	<!-- resultType:返回结果的类型 -->
	<select id="queryById" parameterType="int" resultType="com.igeek.pojo.User">
		SELECT * FROM user WHERE id = #{id}
	</select>
	
	<select id="queryByName" parameterType="string" resultType="com.igeek.pojo.User">
		SELECT * FROM user WHERE username like #{value}
	</select>
	
	<!-- 插入 -->
	<insert id="insertUser" parameterType="com.igeek.pojo.User">
		INSERT INTO user (username,sex,birthday,address)
		VALUES
		(#{username},#{sex},#{birthday},#{address})
	</insert>
	
	
	<!-- 保存用户 -->
	<insert id="saveUser" parameterType="com.igeek.pojo.User">
		<!-- selectKey 标签实现主键返回 -->
		<!-- keyColumn:主键对应的表中的哪一列 -->
		<!-- keyProperty：主键对应的pojo中的哪一个属性 -->
		<!-- order：设置在执行insert语句前执行查询id的sql，孩纸在执行insert语句之后执行查询id的sql -->
		<!-- resultType：设置返回的id的类型 -->
		<selectKey keyColumn="id" keyProperty="id" order="AFTER"
			resultType="int">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO `user`
		(username,birthday,sex,address) VALUES
		(#{username},#{birthday},#{sex},#{address})
	</insert>
	
	
	<!-- 保存用户 -->
	<insert id="saveUser1" parameterType="com.igeek.pojo.User">
		<!-- selectKey 标签实现主键返回 -->
		<!-- keyColumn:主键对应的表中的哪一列 -->
		<!-- keyProperty：主键对应的pojo中的哪一个属性 -->
		<!-- order：设置在执行insert语句前执行查询id的sql，在执行insert语句之后执行查询id的sql -->
		<!-- resultType：设置返回的id的类型 -->
		<selectKey keyColumn="uuid" keyProperty="uuid" order="BEFORE"
			resultType="string">
			SELECT uuid()
		</selectKey>
		INSERT INTO `user1`
		(username,birthday,sex,address,uuid) VALUES
		(#{username},#{birthday},#{sex},#{address},#{uuid})
	</insert>
		
	<!-- 更新 -->
	<update id="updateUser" parameterType="com.igeek.pojo.User">
		UPDATE user SET username = #{username}
		WHERE id=#{id}		
	</update>	
	<!-- 删除 -->
	<delete id="deleteUser" parameterType="int">
		DELETE FROM user WHERE id = #{id}
	</delete>
</mapper>
