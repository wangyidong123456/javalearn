<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.igeekhome.maven</groupId>
	<artifactId>ssm-parent</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>

	<properties>
		<junit.version>4.12</junit.version>
		<servlet.version>3.0-alpha-1</servlet.version>
		<spring.version>4.3.13.RELEASE</spring.version>
		<mybatis.version>3.4.2</mybatis.version>
		<mybatis-spring.version>1.3.1</mybatis-spring.version>
		<mysql.version>5.1.19</mysql.version>
		<druid.version>1.0.29</druid.version>
		<aspectjweaver.version>1.8.11</aspectjweaver.version>
		<slf4j.version>1.7.24</slf4j.version>
		<log4j.version>1.2.17</log4j.version>
		<jstl.version>1.2</jstl.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
			<!-- servlet-api JSP页面编译时需要的包 -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>servlet-api</artifactId>
				<version>${servlet.version}</version>
				<scope>provided</scope>
			</dependency>
			<!-- Spring 以及 SpringMVC需要引入的包，自动引入需要参照的包 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 持久层的包 -->
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis</artifactId>
				<version>${mybatis.version}</version>
			</dependency>
			<!-- Spring 和 Mybatis的整合包 -->
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis-spring</artifactId>
				<version>${mybatis-spring.version}</version>
			</dependency>
			<!-- Mysql驱动包 -->
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<version>${mysql.version}</version>
			</dependency>
			<!-- druid数据库连接池 -->
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>druid</artifactId>
				<version>${druid.version}</version>
			</dependency>
			<dependency>
				<groupId>org.aspectj</groupId>
				<artifactId>aspectjweaver</artifactId>
				<version>${aspectjweaver.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jdbc</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 打日志的 -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-log4j12</artifactId>
				<version>${slf4j.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>${slf4j.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>${log4j.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>jstl</groupId>
				<artifactId>jstl</artifactId>
				<version>${jstl.version}</version>
				<scope>provided</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<!-- 在maven的web工程中，將配置文件放在resource目錄下，但是因为有了mybatis，也会将配置去文件放在java目录下，可能会导致配置文件打包失败的情况 -->
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
				</includes>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>
				<!-- 设置编译版本为1.8 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>
				<!-- Jetty插件，提供一种web容器 -->
				<plugin>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-maven-plugin</artifactId>
					<version>9.4.2.v20170220</version>
					<configuration>
						<httpConnector>
							<!-- 配置运行的端口号 -->
							<port>8088</port>
						</httpConnector>
						<!-- 配置扫描的时间间隔 -->
						<scanIntervalSeconds>1</scanIntervalSeconds>
						<webApp>
							<!-- 配置上下文 -->
							<contextPath>/ssm</contextPath>
						</webApp>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	<modules>
		<module>ssm-dao</module>
		<module>ssm-service</module>
		<module>ssm-web</module>
		<module>ssm-utils</module>
		<module>ssm-security</module>
	</modules>
</project>